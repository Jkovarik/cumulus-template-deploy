- name: HelloWorld
  handler: hello-world.handler
  timeout: 300
  memory: 256
  source: '../cumulus/cumulus/tasks/hello-world-task/dist/index.js'

- name: sqs2sf
  handler: sf-starter.handler
  timeout: 200
  memory: 384
  source: '../cumulus/cumulus/tasks/sf-starter/dist/index.js'

- name: sns2elasticsearch
  handler: daac-ops-api.indexer
  timeout: 100
  passElasticSearchEndpoint: true
  memory: 256
  source: '../cumulus/daac-ops-api/dist/index.js'

- name: log2elasticsearch
  handler: daac-ops-api.logHandler
  timeout: 100
  memory: 256
  passElasticSearchEndpoint: true
  source: '../cumulus/daac-ops-api/dist/index.js'

- name: sf2snsStart
  handler: sf-sns-broadcast.start
  timeout: 100
  memory: 256
  source: '../cumulus/cumulus/tasks/sf-sns-broadcast/dist/index.js'

- name: sf2snsEnd
  handler: sf-sns-broadcast.end
  timeout: 100
  memory: 256
  source: '../cumulus/cumulus/tasks/sf-sns-broadcast/dist/index.js'

- name: ScheduleSF
  handler: sf-starter.queue
  timeout: 100
  memory: 256
  source: '../cumulus/cumulus/tasks/sf-starter/dist/index.js'

- name: jobs
  handler: daac-ops-api.jobs
  timeout: 300
  memory: 512
  passElasticSearchEndpoint: true
  source: '../cumulus/daac-ops-api/dist/index.js'

# used as custom resource for cloudformation manipulation
- name: CustomBootstrap
  handler: daac-ops-api.bootstrap
  timeout: 100
  memory: 256
  source: '../cumulus/daac-ops-api/dist/index.js'
  envs:
    internal: '{{buckets.internal}}'

# used as custom resource for cloudformation manipulation
- name: Authorizer
  handler: daac-ops-api.authorizer
  timeout: 100
  memory: 256
  source: '../cumulus/daac-ops-api/dist/index.js'

- name: ApiCollections
  handler: daac-ops-api.collections
  timeout: 20
  memory: 256
  source: '../cumulus/daac-ops-api/dist/index.js'
  envs:
    UsersTable: '!Ref UsersTableDynamoDB'
    CollectionsTable: '!Ref CollectionsTableDynamoDB'
    internal: '{{buckets.internal}}'
  apiGateway:
    - path: collections
      method: get
      cors: true
      api: backend
    - path: collections/{collectionName}/{version}
      method: get
      cors: true
      api: backend
    - path: collections
      method: post
      cors: true
      api: backend
    - path: collections/{collectionName}/{version}
      method: put
      cors: true
      api: backend
    - path: collections/{collectionName}/{version}
      method: delete
      cors: true
      api: backend

- name: ApiGranules
  handler: daac-ops-api.granules
  timeout: 20
  memory: 256
  source: '../cumulus/daac-ops-api/dist/index.js'
  passElasticSearchEndpoint: true
  envs:
    UsersTable: '!Ref UsersTableDynamoDB'
    CollectionsTable: '!Ref CollectionsTableDynamoDB'
    ProvidersTable: '!Ref ProvidersTableDynamoDB'
    invoke: '!Ref ScheduleSFLambdaFunction'
    bucket: '{{buckets.internal}}'
    internal: '{{buckets.internal}}'
    cmr_provider: '{{cmr.provider}}'
    cmr_client_id: '{{cmr.clientId}}'
    cmr_username: '{{cmr.username}}'
    cmr_password: '!GetAtt CumulusCustomResource.CmrPassword'
  apiGateway:
    - path: granules
      method: get
      cors: true
      api: backend
    - path: granules/{granuleName}
      method: get
      cors: true
      api: backend
    - path: granules/{granuleName}
      method: put
      cors: true
      api: backend
    - path: granules/{granuleName}
      method: delete
      cors: true
      api: backend

- name: ApiExecutions
  handler: daac-ops-api.executions
  timeout: 20
  memory: 256
  source: '../cumulus/daac-ops-api/dist/index.js'
  envs:
    UsersTable: '!Ref UsersTableDynamoDB'
  apiGateway:
    - path: executions
      method: get
      cors: true
      api: backend
    - path: executions/{arn}
      method: get
      cors: true
      api: backend

- name: ApiWorkflows
  handler: daac-ops-api.workflows
  timeout: 20
  memory: 256
  source: '../cumulus/daac-ops-api/dist/index.js'
  envs:
    bucket: '{{buckets.internal}}'
    UsersTable: '!Ref UsersTableDynamoDB'
  apiGateway:
    - path: workflows
      method: get
      cors: true
      api: backend
    - path: workflows/{name}
      method: get
      cors: true
      api: backend

- name: ApiRules
  handler: daac-ops-api.rules
  timeout: 20
  memory: 256
  envs:
    UsersTable: '!Ref UsersTableDynamoDB'
    CollectionsTable: '!Ref CollectionsTableDynamoDB'
    ProvidersTable: '!Ref ProvidersTableDynamoDB'
    RulesTable: '!Ref RulesTableDynamoDB'
    invoke: '!Ref ScheduleSFLambdaFunction'
    invokeArn: '!GetAtt ScheduleSFLambdaFunction.Arn'
    bucket: '{{buckets.internal}}'
  source: '../cumulus/daac-ops-api/dist/index.js'
  apiGateway:
    - path: rules
      method: get
      cors: true
      api: backend
    - path: rules/{name}
      method: get
      cors: true
      api: backend
    - path: rules
      method: post
      cors: true
      api: backend
    - path: rules/{name}
      method: put
      cors: true
      api: backend
    - path: rules/{name}
      method: delete
      cors: true
      api: backend

- name: ApiProviders
  handler: daac-ops-api.providers
  timeout: 20
  memory: 256
  envs:
    UsersTable: '!Ref UsersTableDynamoDB'
    ProvidersTable: '!Ref ProvidersTableDynamoDB'
    internal: '{{buckets.internal}}'
  source: '../cumulus/daac-ops-api/dist/index.js'
  apiGateway:
    - path: providers
      method: get
      cors: true
      api: backend
    - path: providers/{id}
      method: get
      cors: true
      api: backend
    - path: providers
      method: post
      cors: true
      api: backend
    - path: providers/{id}
      method: put
      cors: true
      api: backend
    - path: providers/{id}
      method: delete
      cors: true
      api: backend

- name: ApiPdrs
  handler: daac-ops-api.pdrs
  timeout: 20
  memory: 256
  source: '../cumulus/daac-ops-api/dist/index.js'
  envs:
    UsersTable: '!Ref UsersTableDynamoDB'
    internal: '{{buckets.internal}}'
  apiGateway:
    - path: pdrs
      method: get
      cors: true
      api: backend
    - path: pdrs/{pdrName}
      method: get
      cors: true
      api: backend
    - path: pdrs/{pdrName}
      method: delete
      cors: true
      api: backend

- name: ApiLogs
  handler: daac-ops-api.logs
  timeout: 20
  memory: 256
  source: '../cumulus/daac-ops-api/dist/index.js'
  passElasticSearchEndpoint: true
  envs:
    UsersTable: '!Ref UsersTableDynamoDB'
  apiGateway:
    - path: stats/logs
      method: get
      cors: true
      api: backend
    - path: logs
      method: get
      cors: true
      api: backend

- name: ApiSchema
  handler: daac-ops-api.schemas
  timeout: 20
  memory: 256
  source: '../cumulus/daac-ops-api/dist/index.js'
  envs:
    UsersTable: '!Ref UsersTableDynamoDB'
  apiGateway:
    - path: schemas/{schemaName}
      method: get
      cors: true
      api: backend

- name: ApiStats
  handler: daac-ops-api.stats
  timeout: 20
  memory: 256
  source: '../cumulus/daac-ops-api/dist/index.js'
  envs:
    UsersTable: '!Ref UsersTableDynamoDB'
  apiGateway:
    - path: stats
      method: get
      cors: true
      api: backend
    - path: stats/histogram
      method: get
      cors: true
      api: backend
    - path: stats/aggregate
      method: get
      cors: true
      api: backend
    - path: stats/average
      method: get
      cors: true
      api: backend

- name: ApiAuth
  handler: daac-ops-api.auth
  timeout: 20
  memory: 256
  source: '../cumulus/daac-ops-api/dist/index.js'
  envs:
    EARTHDATA_BASE_URL: '{{backend.endpoint}}'
    DASHBOARD_ENDPOINT: '{{backend.dashboard}}'
    API_ENDPOINT: '{{backend.api}}'
    EARTHDATA_CLIENT_ID: '{{EARTHDATA_CLIENT_ID}}'
    EARTHDATA_CLIENT_PASSWORD: '{{EARTHDATA_CLIENT_PASSWORD}}'
    UsersTable: '!Ref UsersTableDynamoDB'
  apiGateway:
    - api: backend
      path: auth
      method: get
      cors: true
    - api: backend
      path: auth/token
      method: get
      cors: true
    - api: backend
      path: auth/redirect
      method: get
      cors: true
    - api: backend
      path: auth/login
      method: get
      cors: true

- name: ApiDistribution
  handler: daac-ops-api.distribution
  timeout: 20
  memory: 256
  source: '../cumulus/daac-ops-api/dist/index.js'
  envs:
    DEPLOYMENT_ENDPOINT: '{{distribution.redirect}}'
    EARTHDATA_CLIENT_ID: '{{EARTHDATA_CLIENT_ID}}'
    EARTHDATA_CLIENT_PASSWORD: '{{EARTHDATA_CLIENT_PASSWORD}}'
    protected: '{{buckets.protected}}'
  apiGateway:
    - api: distribution
      path: 'redirect'
      method: get
    - api: distribution
      path: '{granuleId}'
      method: get
